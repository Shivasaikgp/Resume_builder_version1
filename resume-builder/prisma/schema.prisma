// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  name          String?
  password      String?
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  accounts    Account[]
  sessions    Session[]
  resumes     Resume[]
  userContext UserContext?
  aiFeedback  AIFeedback[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Resume {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  title          String
  data           Json
  templateConfig Json     @map("template_config")
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses ResumeAnalysis[]

  @@map("resumes")
}

model UserContext {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  contextData Json     @map("context_data")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_contexts")
}

model ResumeAnalysis {
  id           String   @id @default(cuid())
  resumeId     String   @map("resume_id")
  score        Int
  analysisData Json     @map("analysis_data")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("resume_analyses")
}

model AIFeedback {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String   // 'suggestion', 'analysis', 'general'
  rating    Int      // 1-5 rating
  comment   String?  // Optional comment
  context   Json     // Flexible context data
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([rating])
  @@index([createdAt])
  @@map("ai_feedback")
}

model ErrorLog {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  errorType   String   @map("error_type")
  errorCode   String?  @map("error_code")
  message     String
  stack       String?
  context     Json     @default("{}")
  resolved    Boolean  @default(false)
  resolvedAt  DateTime? @map("resolved_at")
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([errorType])
  @@index([errorCode])
  @@index([resolved])
  @@index([createdAt])
  @@map("error_logs")
}
